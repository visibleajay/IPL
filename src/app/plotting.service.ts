import { Injectable } from '@angular/core';
import Plotly from 'plotly.js/dist/plotly.min.js'
import {ScatterData, Layout} from 'plotly.js';

export interface IPLDataInterface {
  title: String,
  plot: Function
}

@Injectable()
export class PlottingService {

  public counter: number;
  private IPL_DATA: IPLDataInterface[];

  constructor() {
    this.counter = 0;
    this.IPL_DATA = [
      {
        title: 'IPL is an equal opportunity game.',
        plot: this.equalOpportunityPlot
      },
      {
        title: 'Planning to watch a game, get ready to choose a team',
        plot: this.gameResult
      },
      {
        title: 'Toss is not the boss',
        plot: this.tossBossPlot
      },
      {
        title: `Home Ground is not the Lion's Den`,
        plot: this.homeGroundPlot
      },
      {
        title: `It's not the Batsman Game`,
        plot: this.batsmanPlot
      },
      {
        title: `IPL = Instant Paisa vasooL`,
        plot: this.IPLPlot
      }
    ];
  }

  public updateCounter(value: number) {
    this.counter = this.counter + value;
  }

  public getDisplayData(): IPLDataInterface {
    console.log("InIsde counter");
    return this.IPL_DATA[this.counter];
  }

  public disablePrevious(): boolean {
    return this.counter == 0;
  }

  public disableNext(): boolean {
    return this.counter == 5;
  }

  private equalOpportunityPlot() {
    
    const TOTAL_MATCHES = {
      x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'DC', 'KTK', 'PW', 'SRH', 'RPS', 'GL'],
      y: [132,139,131,134,118,133,140,75,14,46,62,14,16],
      name: 'Total Match',
      type: 'bar'
    } as Partial<ScatterData>;
    
    const WINNING_MATCHES = {
        x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'DC', 'KTK', 'PW', 'SRH', 'RPS', 'GL'],
        y: [68,70,79,63,63,56,80,29,6,12,34,5,9],
        name: 'Win',
        type: 'bar'
    } as Partial<ScatterData>
    
    const LOSSING_MATCHES = {
        x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'DC', 'KTK', 'PW', 'SRH', 'RPS', 'GL'],
        y: [64,69,52,71,55,77,60,46,8,34,28,9,7],
        name: 'Loss',
        type: 'bar'
    } as Partial<ScatterData>
    
    const LAYOUT = {
      barmode: 'group',
      title: 'Win and Loss of Each Team in IPL',
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      },
      xaxis: {
        title: 'Team Name',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      },
      yaxis: {
        title: 'Number of Matches',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      }
    } as Partial<Layout>;
    
    Plotly.newPlot('chart', [TOTAL_MATCHES, WINNING_MATCHES, LOSSING_MATCHES], LAYOUT);
  }

  private gameResult() {   
    const RESULT_INFO = [{
      values: [574, 3],
      labels: ['Result', 'No Result'],
      type: 'pie'
    }] as any;
    
    const LAYOUT = {
      title: 'Pie Chart of Total Matches',
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      }
    };   

    Plotly.newPlot('chart', RESULT_INFO, LAYOUT);
  }

  private tossBossPlot () {
    const TOSS_INFO = [{
      values: [291, 280],
      labels: ['Win', 'Loss'],
      type: 'pie'
    }] as any;

    const LAYOUT = {
      title: 'Match Result for Toss Winner',
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      }
    };

    Plotly.newPlot('chart', TOSS_INFO, LAYOUT);
  }

  private homeGroundPlot() {
    const HOME_GROUND_MATCHES = {
      x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'KTK', 'SRH', 'RPS', 'GL'],
      y: [61, 58, 48, 63, 45, 59, 77, 5, 52, 25, 7],
      name: 'Total',
      type: 'bar'
    } as Partial<ScatterData>
    
    const HOME_GROUND_WIN = {
        x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'KTK', 'SRH', 'RPS', 'GL'],
        y: [34, 29, 33, 27, 31, 23, 40, 2, 17, 0,4],
        name: 'Win',
        type: 'bar'
    } as Partial<ScatterData>
  
    const HOME_GROUND_LOSS = {
        x: ['KKR', 'RCB', 'CSK', 'KXIP', 'RR', 'DD', 'MI', 'KTK', 'SRH', 'RPS', 'GL'],
        y: [27, 29, 15, 36, 14, 36, 37, 3, 35, 25, 3],
        name: 'Loss',
        type: 'bar'
    } as Partial<ScatterData>
   
    const LAYOUT = {
      barmode: 'group',
      title: `Win and Loss of Each Team on it's Home Ground`,
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      },
      xaxis: {
        title: 'Team Name',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      },
      yaxis: {
        title: 'Number of Matches',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      }
    } as Partial<Layout>;
    
    Plotly.newPlot('chart', [HOME_GROUND_MATCHES, HOME_GROUND_WIN, HOME_GROUND_LOSS], LAYOUT);
  }

  private batsmanPlot() {
    const NOT_BATSMAN_PLOT = [{
      values: [124, 453],
      labels: ['<120 runs', '>120 runs'],
      type: 'pie'
    }] as any;

    const LAYOUT = {
      title: '% Matches with 120 runs scores',
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      }
    };

    Plotly.newPlot('chart', NOT_BATSMAN_PLOT, LAYOUT);
  }

  private IPLPlot() {
    const TOTAL_MATCH_SCORE = {
      x: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577],
      y: [304,447,257,331,222,334,285,410,431,298,273,299,309,320,343,275,372,331,347,341,336,347,295,215,253,292,207,375,253,281,248,344,379,315,287,243,314,401,376,135,212,329,330,204,312,297,377,238,353,355,412,309,349,291,295,279,228,327,311,191,162,205,266,237,344,369,333,341,324,299,251,334,282,290,282,235,298,290,287,282,283,308,307,299,278,344,311,271,212,359,234,337,281,298,248,279,349,241,334,261,288,239,298,326,267,286,377,269,203,208,331,328,307,295,280,311,420,288,271,349,283,407,273,338,185,375,334,302,306,332,291,311,306,335,361,299,327,349,337,303,314,327,323,309,338,365,469,293,404,331,312,306,310,348,370,312,277,322,223,311,289,326,282,262,225,352,325,265,387,279,268,333,246,168,314,304,278,323,194,225,317,303,283,381,299,317,319,366,345,331,377,166,266,320,242,258,342,320,346,433,307,216,259,321,286,203,279,189,336,276,239,287,311,295,281,318,296,299,295,354,325,175,324,253,239,329,273,250,293,334,359,194,260,307,195,274,353,293,237,267,314,56,257,353,352,295,327,352,227,197,211,326,284,297,296,287,271,272,214,357,391,219,246,309,300,250,322,165,374,354,243,362,298,313,277,344,314,241,303,282,320,316,364,294,323,291,186,260,342,271,311,222,298,264,293,335,354,277,241,296,271,228,298,328,221,288,367,313,310,270,230,234,398,238,269,221,236,293,288,320,341,367,246,286,225,305,271,193,270,249,354,266,296,280,219,317,315,292,231,284,292,321,222,249,239,237,233,224,315,360,371,396,335,321,319,299,290,330,386,313,344,344,291,259,273,357,357,265,161,350,218,360,323,309,275,369,292,258,362,228,270,231,285,241,362,333,303,318,384,249,316,306,188,262,336,267,334,273,285,291,411,268,231,333,384,261,314,273,298,364,283,141,241,246,291,251,326,329,262,338,308,313,330,359,355,321,418,236,364,187,317,299,381,317,297,356,416,283,340,280,288,331,329,321,310,315,360,374,331,342,314,321,234,384,298,349,428,399,338,299,298,373,356,370,336,338,329,334,334,258,372,330,314,313,400,293,403,277,335,343,264,294,287,194,280,329,200,266,237,366,226,362,321,364,272,299,305,314,395,317,367,320,431,302,365,239,190,337,218,264,389,189,227,349,289,279,363,247,197,323,409,375,327,224,288,290,305,383,287,279,341,272,357,318,289,362,322,353,212,343,352,391,345,373,285,320,374,299,321,328,255,386,353,269,322,349,270,304,296,251,348,169,359,332,369,197,331,249,319,345,345,320,277,317,302,325,408],
      name: 'Match Score',
      type: 'bar'
    } as Partial<ScatterData>;
  
    const FOUR_SIX = {
      x: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577],
      y: [174,302,148,198,104,224,180,256,306,174,190,158,204,178,202,158,220,190,186,192,220,202,170,106,136,180,94,216,150,154,132,190,248,158,154,110,222,284,222,84,140,178,192,110,186,186,224,114,210,230,264,174,220,118,152,178,132,156,170,88,104,120,138,132,200,198,178,176,172,126,102,194,148,160,126,62,154,152,126,150,152,174,158,150,158,216,160,130,100,226,102,172,154,118,112,126,200,130,194,134,134,98,136,172,130,114,216,100,94,82,188,164,172,156,130,160,266,138,138,208,158,260,144,198,94,248,196,152,166,202,156,162,178,178,190,166,168,168,182,186,164,142,178,176,194,190,336,132,256,194,166,130,186,192,224,170,122,194,88,156,128,154,156,158,78,226,174,154,254,148,130,164,116,92,170,154,148,172,86,134,180,180,150,232,156,170,160,222,192,194,236,64,168,176,110,120,194,182,208,302,164,94,100,180,146,94,138,68,192,144,108,144,158,152,162,146,132,162,148,206,208,64,200,140,122,162,154,130,164,188,218,110,116,200,138,146,230,134,106,154,172,24,146,204,210,168,176,174,96,110,88,190,150,180,158,156,152,146,108,236,254,114,126,180,154,110,206,80,238,218,108,258,146,158,138,220,172,102,170,156,178,182,246,154,216,156,78,96,194,160,184,106,134,128,178,214,236,138,108,162,150,134,174,198,102,144,218,196,188,172,120,156,276,110,190,76,116,170,166,214,220,208,134,182,90,156,150,108,106,136,234,140,196,166,104,190,152,158,128,152,162,180,98,130,120,118,124,128,194,210,186,288,216,174,188,182,178,186,226,174,184,208,142,126,156,206,206,126,60,228,110,220,192,160,160,224,138,112,222,100,144,90,162,118,220,182,130,180,240,92,196,164,142,122,192,152,190,158,126,158,254,98,86,164,244,114,182,122,142,220,150,66,106,110,144,108,144,166,150,214,170,194,162,236,212,162,274,90,224,90,176,158,256,190,148,208,276,142,190,144,158,178,182,180,180,172,202,230,186,184,170,228,124,270,174,218,282,254,224,142,156,222,230,216,218,200,194,192,186,128,254,178,190,174,280,166,236,156,218,206,122,150,150,110,126,198,130,132,122,198,152,222,150,210,144,150,174,214,258,174,238,172,284,148,234,136,98,190,144,134,230,110,108,202,152,128,236,146,110,180,278,214,180,122,142,148,156,230,140,124,202,106,180,162,152,186,166,188,98,196,212,208,180,216,122,166,220,156,166,160,114,244,172,150,204,166,138,170,158,128,232,82,212,210,220,102,244,132,152,204,236,154,118,186,148,208,266],
      name: 'Boundary Score',
      type: 'bar'
    } as Partial<ScatterData>;
    
    const LAYOUT = {
      'barmode': 'group',
      title: `Match Score vs Boundary Score`,
      titlefont: {
        family: 'sans-serif',
        size: 13,
        color: '#7f7f7f'
      },
      xaxis: {
        title: 'Match Number',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      },
      yaxis: {
        title: 'Score',
        titlefont: {
          family: 'sans-serif',
          size: 12,
          color: '#7f7f7f'
        }
      }
    } as Partial<Layout>

    Plotly.newPlot('chart', [TOTAL_MATCH_SCORE, FOUR_SIX], LAYOUT);
  }
}
